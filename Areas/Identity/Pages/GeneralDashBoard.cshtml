@page
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> _signInManager
@inject UserManager<IdentityUser> _userManager
@model TradeApp.Areas.Identity.Pages.GeneralDashBoardModel
@{
    ViewData["Title"] = "DashBoard";
}

<h1>DashBoard</h1>
@{ var appuser = await _userManager.GetUserAsync(User);}

<div><b>Products</b><br /></div>
<table class="table">
    <thead>
        <tr>
			<th>
                <span>Image</span>
            </th>
            <th>@Html.DisplayNameFor(model => model.productDetails.FirstOrDefault().ProductName)</th>
            <th>@Html.DisplayNameFor(model => model.productDetails.FirstOrDefault().BrandName)</th>
            <th>@Html.DisplayNameFor(model => model.productDetails.FirstOrDefault().Price)</th>
			<th>@Html.DisplayNameFor(model=>model.productDetails.FirstOrDefault().AvgRating)</th>
            <th></th>
        </tr>
    </thead>
	<tbody>
		@try
		{
			@foreach (var product in Model.productDetails)
			{
		<tr>
			<td>
				<img src="@product.ImageUrl" class="imagelist" alt="No Image"></td>
			<td>@product.ProductName</td>
			<td>@product.BrandName</td>
			<td>@product.Price.ToString()</td>
			<td>
                @product.AvgRating.ToString()
            </td>
                 @if (await _userManager.IsInRoleAsync(appuser, "Admin"))
                {
                    <td>
                         <a asp-controller="products" asp-action="Edit" asp-route-id="@product.Code">Edit</a> |
                         <a asp-controller="products" asp-action="Details" asp-route-id="@product.Code">Details</a> |
                         <a asp-controller="products" asp-action="Delete" asp-route-id="@product.Code">Delete</a>
                    </td>
                    
                       
                }
                  else
                    {
                        <td>
                            <a asp-controller="products" asp-action="Details" asp-route-id="@product.Code">View</a> |
				<a asp-controller="products" asp-action="RateProduct" asp-route-id="@product.Code">Rate</a> |
                        </td>			
                    }
           
		</tr>

			}
		}
            catch
            {
                <tr>
                    <td></td>
                </tr>
            }

	</tbody>   
</table>

<th></th>
@if(await _userManager.IsInRoleAsync(appuser, "Admin"))
{
    <div><b>Orders</b><br /></div>
}
else
{
    <div><b>Your Orders</b></div>
}

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.orderDetails.FirstOrDefault().PlacedDate)</th>
            <th>@Html.DisplayNameFor(model => model.orderDetails.FirstOrDefault().Status)</th>
            <th>@Html.DisplayNameFor(model => model.orderDetails.FirstOrDefault().ProductCharge)</th>
            <th></th>
        </tr>
    </thead>
	<tbody>
		@try
		{
			@foreach (var order in Model.orderDetails)
			{
				<tr>
					<td>@order.PlacedDate</td>
					<td>@order.Status</td>
					<td>@order.ProductCharge.ToString()</td>
					@if (await _userManager.IsInRoleAsync(appuser, "Customer"))
                {
                    <td>
                        <a asp-controller="Orders" asp-action="Details" asp-route-id="@order.Code">View</a> |
                        <a asp-controller="Orders" asp-action="Delete" asp-route-id="@order.Code">Cancel</a>
                    </td>
                }
                else if (await _userManager.IsInRoleAsync(appuser, "Admin"))
                {
                    <td>
                        <a asp-controller="Orders" asp-action="Details" asp-route-id="@order.Code">View</a> |
                        <a asp-controller="Orders" asp-action="ConfirmOrder" asp-route-id="@order.Code">Confirm</a>|
                        <a asp-controller="Orders" asp-action="DeliveredOrder" asp-route-id="@order.Code">Make Delivered</a>|
                    </td>
                }
				</tr>
				
			}

		}
		catch { 
			<tr>
				<td></td>
			</tr>
		}

	</tbody>
    
</table>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}